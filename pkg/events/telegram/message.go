package telegram

import (
	"ToDoBot1/pkg/clients/telegram"
	"ToDoBot1/pkg/storage"
	"fmt"
	"time"
	"unicode/utf8"
)

// Text for cmds
const (
	helpCmd  = "/help"
	startCmd = "/start"
	notifCmd = "/notif"
)

// Text for /help and /start cmds
const (
	helpMsg = "ü§ñ –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Å—Ç–æ–≥–æ üìåToDo —Å–ø–∏—Å–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏, —É–¥–∞–ª—è—Ç—å, –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á.\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ * <code>c–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</code> * –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ <code>–∫–ª–∏–∫–Ω—É–≤</code> –Ω–∞ –Ω–µ–≥–æ.\n\n–í—Å—ë –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚§µÔ∏è"

	unknownCmdMsg = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n/help - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
)

// Text for output information about tasks
const (
	noUncomplTasksMsg = "üëå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
	noComplTasksMsg   = "ü§∑üèª‚Äç‚ôÄÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
	UnComplTasksMsg   = "‚§µÔ∏è –°–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"
	ComplTasks        = "‚§µÔ∏è –°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"
	taskNotExistMsg   = "‚ùå –ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
)

// Text for adding task
const (
	addingMsg            = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
	addingTitleMsg       = "üìù –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"
	incorrectTitleMsg    = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
	taskAlreadyExistMsg  = "‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
	successTitleSetMsg   = "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n‚ùóÔ∏è –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö –∑–∞–¥–∞—á."
	successDescrSetMsg   = "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n\"–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\"\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è (–ß–ß:–ú–ú), —Ç–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>23:59</b>"
	incorrectDeadlineMsg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\nüìù –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n\"–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\"\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è (–ß–ß:–ú–ú), —Ç–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>23:59</b>"
	successDeadlineMsg   = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
	TitleCantStartSlash  = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ \"/\"\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
	DescrCantStartSlash  = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ \"/\"\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
)

// Text for closing task
const (
	closingMsg              = "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
	closingTitleMsg         = "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å"
	closingAlreadyClosedMsg = "‚òëÔ∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
	closingSuccessClosed    = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è."
)

// Text for deleting task
const (
	deletingMsg           = "üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
	deletingTitleMsg      = "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"
	deletingSuccessDelete = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
)

// Text for main menu buttons
const (
	uncomplTasksBtn = "üìå My tasks"

	closeTaskBtn = "üèÅ Complete"

	addTaskBtn = "‚ûï Add"
	delTaskBtn = "üóë Delete"

	complTasksBtn = "üóÑ Archive"
)

// reply markup keyboard main menu var
var mainMenuBtns = telegram.NewReplyKeyboard([][]string{
	{uncomplTasksBtn, closeTaskBtn},
	{addTaskBtn, delTaskBtn, complTasksBtn},
})

const (
	dateTimeFormat = "02.01.2006 15:04"
)

func UncomplTasksString(tasks []storage.Task) string {
	var res string = ""
	for _, v := range tasks {
		titleString := fmt.Sprintf("üîñ * <code>%s</code> *\n", v.Title)

		var timeToDeadLineStr string
		curTime := time.Now().Unix()
		if int64(v.Deadline) < curTime {
			diff := time.Unix(curTime, 0).Sub(time.Unix(int64(v.Deadline), 0))
			d := int(diff.Hours()) / 24
			h := int(diff.Hours()) % 24
			m := int(diff.Minutes()) % 60

			timeToDeadLineStr = fmt.Sprintf("üö´ Overdue: %dd %dh %dm\n", d, h, m)
		} else {
			diff := time.Unix(int64(v.Deadline), 0).Sub(time.Unix(curTime, 0))
			d := int(diff.Hours()) / 24
			h := int(diff.Hours()) % 24
			m := int(diff.Minutes()) % 60

			timeToDeadLineStr = fmt.Sprintf("‚è≥ Remaining: %dd %dh %dm\n", d, h, m)
		}

		deadlineString := fmt.Sprintf("üóì Deadline: %s\n", time.Unix(int64(v.Deadline), 0).Format(dateTimeFormat))

		var descrString string
		if utf8.RuneCount([]byte(v.Description)) < 2 {
			descrString = ""
		} else {
			descrString = fmt.Sprintf("üóí Description: %s\n", v.Description)
		}

		res += titleString + timeToDeadLineStr + deadlineString + descrString + "\n"
	}

	return res
}

func makeTasksString(tasks []storage.Task) string {
	var res string = ""
	for _, v := range tasks {
		titleString := fmt.Sprintf("üß∑ * <code>%s</code> *\n", v.Title)

		var statusString string
		if v.Done {
			statusString = fmt.Sprintf("‚úÖ %s\n", getDoneStatus(v.Done))
		} else {
			statusString = fmt.Sprintf("‚ùå %s\n", getDoneStatus(v.Done))
		}

		deadlineString := fmt.Sprintf("‚è∞ –î–µ–¥–ª–∞–π–Ω: %s\n", time.Unix(int64(v.Deadline), 0).Format(dateTimeFormat))

		var descrString string
		if utf8.RuneCount([]byte(v.Description)) < 2 {
			descrString = ""
		} else {
			descrString = fmt.Sprintf("üóí –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", v.Description)
		}

		res += titleString + statusString + deadlineString + descrString + "\n"
	}

	return res
}

func getDoneStatus(status bool) string {
	if !status {
		return "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
	} else {
		return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
	}
}
