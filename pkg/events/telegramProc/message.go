package telegramProc

import (
	"ToDoBot1/pkg/clients/telegram"
	"ToDoBot1/pkg/storage"
	"fmt"
	"log"
	"time"
	"unicode/utf8"
)

// Text for cmds
const (
	helpCmd  = "/help"
	startCmd = "/start"
	notifCmd = "/notif"
)

// Text for /help and /start cmds
const (
	helpMsg = "ü§ñ –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Å—Ç–æ–≥–æ üìåToDo —Å–ø–∏—Å–∫–∞.\n" +
		"‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ * <code>c–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</code> * –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ <code>–∫–ª–∏–∫–Ω—É–≤</code> –Ω–∞ –Ω–µ–≥–æ.\n\n" +
		uncomplTasksBtn + "  ‚Üí  —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n" +
		closeTaskBtn + "  ‚Üí  –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n" +
		addTaskBtn + "  ‚Üí  –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n" +
		delTaskBtn + "  ‚Üí  —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n" +
		closeTaskBtn + "  ‚Üí  —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n" +
		"\n" +
		notifCmd + "  ‚Üí  –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–∞—Ö. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (schedule message) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è."

	unknownCmdMsg = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n/help - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
)

// Text for output information about tasks
const (
	noUncomplTasksMsg = "üëå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
	noComplTasksMsg   = "ü§∑üèª‚Äç‚ôÄÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
	UnComplTasksMsg   = "‚§µÔ∏è List of uncompleted tasks:\n\n"
	ComplTasks        = "‚§µÔ∏è List of completed tasks:\n\n"
	taskNotExistMsg   = "‚ùå –ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
)

// Text for adding task
const (
	addingMsg            = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
	addingTitleMsg       = "üìù –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"
	incorrectTitleMsg    = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
	taskAlreadyExistMsg  = "‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
	successTitleSetMsg   = "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n‚ùóÔ∏è –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö –∑–∞–¥–∞—á."
	successDescrSetMsg   = "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n\"–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\"\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è (–ß–ß:–ú–ú), —Ç–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>23:59</b>"
	incorrectDeadlineMsg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\nüìù –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n\"–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\"\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è (–ß–ß:–ú–ú), —Ç–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>23:59</b>"
	successDeadlineMsg   = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
	TitleCantStartSlash  = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ \"/\"\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
	DescrCantStartSlash  = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ \"/\"\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
)

// Text for closing task
const (
	closingMsg              = "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
	closingTitleMsg         = "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å"
	closingAlreadyClosedMsg = "‚òëÔ∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
	closingSuccessClosed    = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è."
)

// Text for deleting task
const (
	deletingMsg           = "üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
	deletingTitleMsg      = "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"
	deletingSuccessDelete = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
)

// Text for main menu buttons
const (
	uncomplTasksBtn = "üìå My tasks"

	closeTaskBtn = "üèÅ Complete"

	addTaskBtn = "‚ûï Add"
	delTaskBtn = "üóë Delete"

	complTasksBtn = "üóÑ Archive"
)

// reply markup keyboard main menu var
var mainMenuBtns = telegram.NewReplyKeyboard([][]string{
	{uncomplTasksBtn, closeTaskBtn},
	{addTaskBtn, delTaskBtn, complTasksBtn},
})

const (
	dateTimeFormat = "02.01.2006 15:04"
)

func UncomplTasksString(tasks []storage.Task) string {
	var res string
	for _, v := range tasks {
		var timeToDeadLineStr string
		curTime := time.Now().Unix()
		if int64(v.Deadline) < curTime {
			diff := time.Unix(curTime, 0).Sub(time.Unix(int64(v.Deadline), 0))
			d := int(diff.Hours()) / 24
			h := int(diff.Hours()) % 24
			m := int(diff.Minutes()) % 60

			timeToDeadLineStr = fmt.Sprintf("üö´ <b>%dd %dh %dm</b> overdue\n", d, h, m)

		} else {
			diff := time.Unix(int64(v.Deadline), 0).Sub(time.Unix(curTime, 0))
			d := int(diff.Hours()) / 24
			h := int(diff.Hours()) % 24
			m := int(diff.Minutes()) % 60

			timeToDeadLineStr = fmt.Sprintf("‚è≥ <b>%dd %dh %dm</b> remaining\n", d, h, m)
		}

		res += titleString(v.Title) + timeToDeadLineStr + deadlineString(v.Deadline) + descrString(v.Description) + "\n"
	}

	return res
}

func complTasksString(tasks []storage.Task) string {
	location, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		log.Fatal("can't load time location") // bad
	}

	var res string
	for _, v := range tasks {
		finishTimeStr := fmt.Sprintf("‚è± <b>%s</b> finish time\n",
			time.Unix(int64(v.FinishTime), 0).In(location).Format(dateTimeFormat))

		res += titleString(v.Title) + finishTimeStr + deadlineString(v.Deadline) + descrString(v.Description) + "\n"
	}

	return res
}

func titleString(title string) string {
	titleString := fmt.Sprintf("üîñ * <code>%s</code> *\n", title)

	return titleString
}

func deadlineString(deadline uint64) string {
	location, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		log.Fatal("can't load time location") // bad
	}

	deadlineString := fmt.Sprintf("üóì <b>%s</b> deadline\n", time.Unix(int64(deadline),
		0).In(location).Format(dateTimeFormat))

	return deadlineString
}

func descrString(descr string) string {
	var descrString string
	if utf8.RuneCount([]byte(descr)) < 2 {
		descrString = ""
	} else {
		descrString = fmt.Sprintf("üß∑ %s\n", descr)
	}

	return descrString
}
